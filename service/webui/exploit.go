package webui

import (
	"0E7/service/client"
	"0E7/service/config"
	"0E7/service/database"
	"errors"
	"fmt"
	"io"
	"log"
	"math"
	"os"
	"path/filepath"
	"strconv"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/google/uuid"
	"gorm.io/gorm"
)

func exploit(c *gin.Context) {
	exploit_id := c.PostForm("id")
	exploit_name := c.PostForm("name")
	environment := c.PostForm("environment")
	command := c.PostForm("command")
	argv := c.PostForm("argv")
	fileName := c.PostForm("filename")
	platform := c.PostForm("platform")
	arch := c.PostForm("arch")
	timeout := c.PostForm("timeout")
	times := c.PostForm("times")
	filter := c.PostForm("filter")
	flag := c.PostForm("flag")
	team := c.PostForm("team")
	file, errF := c.FormFile("file")
	code := c.PostForm("code")

	if exploit_name == "" {
		exploit_name = uuid.New().String()
	}

	if errF == nil || command != "" || code != "" {
		if errF == nil {
			fileName = file.Filename
		} else if code != "" {
			fileName = code
		}

		if times == "" {
			times = "-2"
		}
		if timeout == "" {
			timeout = "15"
		}

		exploitRecord := database.Exploit{
			Name:        exploit_name,
			Filename:    fileName,
			Environment: environment,
			Command:     command,
			Argv:        argv,
			Platform:    platform,
			Arch:        arch,
			Filter:      filter,
			Timeout:     timeout,
			Times:       times,
			Flag:        flag,
			Team:        team,
		}

		var err error
		if exploit_id == "" {
			// 新增
			err = config.Db.Create(&exploitRecord).Error
		} else {
			// 更新 - 使用ID作为主键
			idInt, parseErr := strconv.Atoi(exploit_id)
			if parseErr != nil {
				c.JSON(400, gin.H{
					"message": "fail",
					"error":   "invalid exploit_id: " + parseErr.Error(),
					"name":    "",
				})
				c.Abort()
				return
			}
			exploitRecord.ID = idInt
			err = config.Db.Model(&exploitRecord).Where("id = ?", exploit_id).Updates(map[string]interface{}{
				"name":        exploit_name,
				"environment": environment,
				"command":     command,
				"argv":        argv,
				"times":       times,
				"timeout":     timeout,
				"filter":      filter,
				"platform":    platform,
				"arch":        arch,
				"filename":    fileName,
				"flag":        flag,
				"team":        team,
			}).Error
		}
		if err != nil {
			c.JSON(400, gin.H{
				"message": "fail",
				"error":   err.Error(),
				"name":    "",
			})
			c.Abort()
			return
		}
		if errF == nil {
			//fileName := exploit_name + filepath.Ext(file.Filename)
			savePath := "upload/" + fmt.Sprintf("%d", exploitRecord.ID) + "/"
			if err = os.MkdirAll(savePath, os.ModePerm); err != nil {
				c.JSON(500, gin.H{
					"message": "fail",
					"error":   err.Error(),
					"name":    "",
				})
				return
			}
			saveFilePath := filepath.Join(savePath, fileName)
			if err := c.SaveUploadedFile(file, saveFilePath); err != nil {
				c.JSON(500, gin.H{
					"message": "fail",
					"error":   err.Error(),
					"name":    "",
				})
				return
			}
			if strings.HasSuffix(fileName, ".zip") {
				if err = client.Unzip(fileName, exploit_name); err != nil {
					c.JSON(500, gin.H{
						"message": "fail",
						"error":   err.Error(),
						"name":    "",
					})
					return
				}
			} else if strings.HasSuffix(fileName, ".tar") {
				if err = client.Untar(fileName, exploit_name); err != nil {
					c.JSON(500, gin.H{
						"message": "fail",
						"error":   err.Error(),
						"name":    "",
					})
					return
				}
			}
		}
		c.JSON(200, gin.H{
			"message": "success",
			"error":   "",
			"name":    exploit_name,
			"id":      exploitRecord.ID,
		})
	}
}

func exploit_rename(c *gin.Context) {
	var err error
	old := c.PostForm("old")
	new := c.PostForm("new")

	if new == "" {
		new = uuid.New().String()
	}
	err = config.Db.Model(&database.Exploit{}).Where("uuid = ? AND is_deleted = ?", old, false).Update("uuid", new).Error
	if err != nil {
		c.JSON(400, gin.H{
			"message":    "fail",
			"error":      err.Error(),
			"exploit_id": "",
		})
		c.Abort()
		return
	}

	err = os.Rename("exploit/"+old, "exploit/"+new)
	if err != nil {
		err = CopyDir("exploit/"+old, "exploit/"+new)
		if err != nil {
			c.JSON(400, gin.H{
				"message":    "fail",
				"error":      err.Error(),
				"exploit_id": "",
			})
		} else {
			c.JSON(202, gin.H{
				"message":    "copy",
				"error":      "The folder is being occupied, operation copy instead, please manually delete the original folder",
				"exploit_id": new,
			})
		}
		return
	}
	c.JSON(200, gin.H{
		"message":    "success",
		"error":      "",
		"exploit_id": new,
	})
}

func CopyDir(srcPath string, destPath string) error {
	if srcInfo, err := os.Stat(srcPath); err != nil {
		log.Println(err.Error())
		return err
	} else {
		if !srcInfo.IsDir() {
			e := errors.New("srcPath Error")
			log.Println(e.Error())
			return e
		}
	}
	if destInfo, err := os.Stat(destPath); err != nil {
		if err = os.MkdirAll(destPath, os.ModePerm); err != nil {
			log.Println(err.Error())
			return err
		}
	} else {
		if !destInfo.IsDir() {
			e := errors.New("DestPath Error")
			log.Println(e.Error())
			return e
		}
	}
	err := filepath.Walk(srcPath, func(path string, f os.FileInfo, err error) error {
		if f == nil {
			return err
		}
		if !f.IsDir() {
			path := strings.Replace(path, "\\", "/", -1)
			destNewPath := strings.Replace(path, srcPath, destPath, -1)
			log.Println("Cope" + path + " to " + destNewPath)
			copyFile(path, destNewPath)
		}
		return nil
	})
	if err != nil {
		log.Println(err.Error())
	}
	return err
}

func copyFile(src, dest string) (w int64, err error) {
	srcFile, err := os.Open(src)
	if err != nil {
		log.Println(err.Error())
		return
	}
	defer srcFile.Close()
	destSplitPathDirs := strings.Split(dest, "/")
	destSplitPath := ""
	for index, dir := range destSplitPathDirs {
		if index < len(destSplitPathDirs)-1 {
			destSplitPath = destSplitPath + dir + "/"
			b, _ := pathExists(destSplitPath)
			if !b {
				log.Println("创建目录:" + destSplitPath)
				err := os.Mkdir(destSplitPath, os.ModePerm)
				if err != nil {
					log.Println(err)
				}
			}
		}
	}
	dstFile, err := os.Create(dest)
	if err != nil {
		log.Println(err.Error())
		return
	}
	defer dstFile.Close()

	return io.Copy(dstFile, srcFile)
}

func pathExists(path string) (bool, error) {
	_, err := os.Stat(path)
	if err == nil {
		return true, nil
	}
	if os.IsNotExist(err) {
		return false, nil
	}
	return false, err
}

func exploit_get_by_id(c *gin.Context) {
	exploit_id := c.Query("id")
	if exploit_id == "" {
		c.JSON(400, gin.H{"message": "fail", "error": "id is required"})
		return
	}

	var exploit database.Exploit
	err := config.Db.Where("id = ? AND is_deleted = ?", exploit_id, false).First(&exploit).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			c.JSON(404, gin.H{"message": "fail", "error": "exploit not found"})
		} else {
			c.JSON(500, gin.H{"message": "fail", "error": err.Error()})
		}
		return
	}

	var code string
	if strings.HasPrefix(exploit.Filename, "data:code/") {
		code = exploit.Filename
		exploit.Filename = ""
	} else if exploit.Filename != "" {
		filePath := filepath.Join("upload", fmt.Sprintf("%d", exploit.ID), exploit.Filename)
		if _, err := os.Stat(filePath); err == nil {
			content, err := os.ReadFile(filePath)
			if err == nil {
				code = string(content)
			}
		}
	}

	times_int, _ := strconv.Atoi(exploit.Times)
	if exploit.Flag == "" {
		exploit.Flag = config.Server_flag
	}
	element := map[string]interface{}{
		"id":          exploit.ID,
		"name":        exploit.Name,
		"filename":    exploit.Filename,
		"environment": exploit.Environment,
		"command":     exploit.Command,
		"argv":        exploit.Argv,
		"platform":    exploit.Platform,
		"arch":        exploit.Arch,
		"filter":      exploit.Filter,
		"timeout":     exploit.Timeout,
		"times":       times_int,
		"flag":        exploit.Flag,
		"team":        exploit.Team,
		"code":        code,
	}

	c.JSON(200, gin.H{
		"message": "success",
		"error":   "",
		"result":  element,
	})
}

func exploit_show_output(c *gin.Context) {
	var err error
	query_id := c.Query("id")
	page_size := c.Query("page_size")
	page_num := c.Query("page")
	var filter_argv []interface{}
	var filter_sql string

	exploit_id_str := c.Query("exploit_id")
	if exploit_id_str == "" {
		c.JSON(400, gin.H{
			"message": "fail",
			"error":   "exploit_id is required",
			"total":   0,
			"result":  []interface{}{},
		})
		return
	}

	// 如果是"new"，表示新建的exploit，还没有执行记录，直接返回空结果
	if exploit_id_str == "new" {
		c.JSON(200, gin.H{
			"message": "success",
			"error":   "",
			"total":   0,
			"result":  []interface{}{},
		})
		return
	}

	// 转换exploit_id为int
	exploit_id, err := strconv.Atoi(exploit_id_str)
	if err != nil {
		c.JSON(400, gin.H{
			"message": "fail",
			"error":   "invalid exploit_id: " + err.Error(),
			"total":   0,
			"result":  []interface{}{},
		})
		return
	}
	filter_sql = filter_sql + " AND exploit_id = ?"
	filter_argv = append(filter_argv, exploit_id)
	client_id_str := c.Query("client_id")
	if client_id_str != "" {
		// 转换client_id为int
		client_id, err := strconv.Atoi(client_id_str)
		if err != nil {
			c.JSON(400, gin.H{
				"message": "fail",
				"error":   "invalid client_id: " + err.Error(),
				"total":   0,
				"result":  []interface{}{},
			})
			return
		}
		filter_sql = filter_sql + " AND client_id = ?"
		filter_argv = append(filter_argv, client_id)
	}
	platform := c.Query("platform")
	if platform != "" {
		filter_sql = filter_sql + " AND platform LIKE ?"
		filter_argv = append(filter_argv, "%"+platform+"%")
	}
	arch := c.Query("arch")
	if arch != "" {
		filter_sql = filter_sql + " AND arch LIKE ?"
		filter_argv = append(filter_argv, "%"+arch+"%")
	}

	if query_id == "" {
		offset := 1
		if page_num != "" {
			offset, err = strconv.Atoi(page_num)
			if err != nil {
				c.JSON(400, gin.H{
					"message": "fail",
					"error":   err.Error(),
					"total":   0,
					"result":  []interface{}{},
				})
				return
			}
			if offset <= 0 {
				offset = 1
			}
		}
		multi := 20
		if page_size != "" {
			multi, err = strconv.Atoi(page_size)
			if err != nil {
				c.JSON(400, gin.H{
					"message": "fail",
					"error":   err.Error(),
					"total":   0,
					"result":  []interface{}{},
				})
				return
			}
			if multi <= 0 {
				multi = 1
			}
		}
		var count int64
		// 使用与查询相同的JOIN逻辑来计算total
		query := config.Db.Table("`0e7_exploit_output`").
			Joins("LEFT JOIN `0e7_client` ON `0e7_exploit_output`.client_id = `0e7_client`.id")
		if len(filter_argv) > 0 {
			query = query.Where(strings.TrimPrefix(filter_sql, " AND "), filter_argv...)
		}
		err := query.Count(&count).Error
		if err != nil {
			c.JSON(400, gin.H{
				"message": "fail",
				"error":   err.Error(),
				"total":   0,
				"result":  []interface{}{},
			})
			return
		}
		page_count := 1
		if count > 0 {
			page_count = int(math.Ceil(float64(count) / float64(multi)))
		}

		// 当没有数据时，直接返回空结果，而不是报错
		if count == 0 {
			c.JSON(200, gin.H{
				"message": "success",
				"error":   "",
				"total":   count,
				"result":  []interface{}{},
			})
			return
		}

		if page_count < offset {
			c.JSON(400, gin.H{
				"message": "fail",
				"error":   "Page Error",
				"total":   count,
				"result":  []interface{}{},
			})
			return
		}
		// 使用join查询获取client信息
		type ExploitOutputWithClient struct {
			database.ExploitOutput
			ClientName string `json:"client_name" gorm:"column:client_name"`
		}

		var outputs []ExploitOutputWithClient
		query = config.Db.Table("`0e7_exploit_output`").
			Select("`0e7_exploit_output`.*, `0e7_client`.name as client_name").
			Joins("LEFT JOIN `0e7_client` ON `0e7_exploit_output`.client_id = `0e7_client`.id")

		if len(filter_argv) > 0 {
			query = query.Where(strings.TrimPrefix(filter_sql, " AND "), filter_argv...)
		}
		err = query.Order("`0e7_exploit_output`.id DESC").Limit(multi).Offset((offset - 1) * multi).Find(&outputs).Error

		if err != nil {
			c.JSON(400, gin.H{
				"message": "fail",
				"error":   err.Error(),
				"total":   count,
				"result":  []interface{}{},
			})
			return
		}

		var ret []map[string]interface{}
		for _, output := range outputs {
			outputStr := output.Output
			if count <= 10 && len(outputStr) > 10240 {
				outputStr = outputStr[len(outputStr)-10240:]
			} else if len(outputStr) > 1024 {
				outputStr = outputStr[len(outputStr)-1024:]
			}

			element := map[string]interface{}{
				"id":          output.ID,
				"exploit_id":  output.ExploitId,
				"client_id":   output.ClientId,
				"client_name": output.ClientName,
				"team":        output.Team,
				"output":      outputStr,
				"status":      output.Status,
				"update_time": output.UpdatedAt.Format(time.DateTime),
			}
			ret = append(ret, element)
		}

		c.JSON(200, gin.H{
			"message": "success",
			"error":   "",
			"total":   count,
			"result":  ret,
		})
	} else {
		// 单个查询也使用join获取client信息
		type ExploitOutputWithClient struct {
			database.ExploitOutput
			ClientName string `json:"client_name" gorm:"column:client_name"`
		}

		var output ExploitOutputWithClient
		err := config.Db.Table("`0e7_exploit_output`").
			Select("`0e7_exploit_output`.*, `0e7_client`.name as client_name").
			Joins("LEFT JOIN `0e7_client` ON `0e7_exploit_output`.client_id = `0e7_client`.id").
			Where("`0e7_exploit_output`.id = ?", query_id).First(&output).Error
		if err != nil {
			c.JSON(400, gin.H{
				"message": "fail",
				"error":   err.Error(),
				"total":   1,
				"result":  []interface{}{},
			})
			return
		}

		var ret []map[string]interface{}
		element := map[string]interface{}{
			"id":          output.ID,
			"exploit_id":  output.ExploitId,
			"client_id":   output.ClientId,
			"client_name": output.ClientName,
			"team":        output.Team,
			"output":      output.Output,
			"status":      output.Status,
			"update_time": output.UpdatedAt.Format(time.DateTime),
		}
		ret = append(ret, element)
		c.JSON(200, gin.H{
			"message": "success",
			"error":   "",
			"total":   1,
			"result":  ret,
		})
	}
}

func exploit_show(c *gin.Context) {
	var err error
	page_size := c.Query("page_size")
	page_num := c.Query("page")
	offset := 1
	if page_num != "" {
		offset, err = strconv.Atoi(page_num)
		if err != nil {
			c.JSON(400, gin.H{
				"message": "fail",
				"error":   err.Error(),
				"total":   0,
				"result":  []interface{}{},
			})
			return
		}
		if offset <= 0 {
			offset = 1
		}
	}
	multi := 20
	if page_size != "" {
		multi, err = strconv.Atoi(page_size)
		if err != nil {
			c.JSON(400, gin.H{
				"message": "fail",
				"error":   err.Error(),
				"total":   0,
				"result":  []interface{}{},
			})
			return
		}
		if multi <= 0 {
			multi = 1
		}
	}

	// 构建查询条件
	var filter_argv []interface{}
	var filter_sql string

	exploit_name := c.Query("name")
	if exploit_name != "" {
		filter_sql = filter_sql + " AND name LIKE ?"
		filter_argv = append(filter_argv, "%"+exploit_name+"%")
	}
	platform := c.Query("platform")
	if platform != "" {
		filter_sql = filter_sql + " AND platform LIKE ?"
		filter_argv = append(filter_argv, "%"+platform+"%")
	}
	arch := c.Query("arch")
	if arch != "" {
		filter_sql = filter_sql + " AND arch LIKE ?"
		filter_argv = append(filter_argv, "%"+arch+"%")
	}

	// 构建基础查询，过滤已删除的记录
	baseQuery := config.Db.Model(&database.Exploit{}).Where("is_deleted = ?", false)
	if filter_sql != "" {
		// 移除开头的 " AND "
		filter_sql = strings.TrimPrefix(filter_sql, " AND ")
		baseQuery = baseQuery.Where(filter_sql, filter_argv...)
	}

	var count int64
	err = baseQuery.Count(&count).Error
	if err != nil {
		c.JSON(400, gin.H{
			"message": "fail",
			"error":   err.Error(),
			"total":   0,
			"result":  []interface{}{},
		})
		return
	}

	page_count := 1
	if count > 0 {
		page_count = int(math.Ceil(float64(count) / float64(multi)))
	}

	// 当没有数据时，直接返回空结果，而不是报错
	if count == 0 {
		c.JSON(200, gin.H{
			"message": "success",
			"error":   "",
			"total":   count,
			"result":  []interface{}{},
		})
		return
	}

	if page_count < offset {
		c.JSON(400, gin.H{
			"message": "fail",
			"error":   "Page Error",
			"total":   count,
			"result":  []interface{}{},
		})
		return
	}

	var exploits []database.Exploit
	query := baseQuery.Order("id DESC").Limit(multi).Offset((offset - 1) * multi)
	err = query.Find(&exploits).Error
	if err != nil {
		c.JSON(400, gin.H{
			"message": "fail",
			"error":   err.Error(),
			"total":   count,
			"result":  []interface{}{},
		})
		return
	}

	var ret []map[string]interface{}
	for _, exploit := range exploits {
		times_int, _ := strconv.Atoi(exploit.Times)
		element := map[string]interface{}{
			"id":          exploit.ID,
			"name":        exploit.Name,
			"filename":    exploit.Filename,
			"environment": exploit.Environment,
			"command":     exploit.Command,
			"argv":        exploit.Argv,
			"platform":    exploit.Platform,
			"arch":        exploit.Arch,
			"filter":      exploit.Filter,
			"timeout":     exploit.Timeout,
			"times":       times_int,
			"flag":        exploit.Flag,
			"team":        exploit.Team,
			"updated":     exploit.UpdatedAt.Format(time.DateTime),
		}
		ret = append(ret, element)
	}

	c.JSON(200, gin.H{
		"message": "success",
		"total":   count,
		"result":  ret,
	})
}

func exploit_delete(c *gin.Context) {
	exploit_id := c.PostForm("id")
	if exploit_id == "" {
		c.JSON(400, gin.H{"message": "fail", "error": "id is required"})
		return
	}

	// 软删除：将is_deleted设置为true
	result := config.Db.Model(&database.Exploit{}).Where("id = ?", exploit_id).Update("is_deleted", true)
	if result.Error != nil {
		c.JSON(500, gin.H{"message": "fail", "error": result.Error.Error()})
		return
	}

	if result.RowsAffected == 0 {
		c.JSON(404, gin.H{"message": "fail", "error": "exploit not found"})
		return
	}

	c.JSON(200, gin.H{
		"message": "success",
		"error":   "",
	})
}
