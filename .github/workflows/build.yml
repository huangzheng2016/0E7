name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-linux:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache apt packages
      uses: actions/cache@v3
      with:
        path: /var/cache/apt
        key: apt-libpcap-${{ runner.os }}-${{ hashFiles('**/build.yml') }}
        restore-keys: |
          apt-libpcap-${{ runner.os }}-
          apt-${{ runner.os }}-
          
    - name: Install libpcap-dev
      run: |
        sudo apt-get update
        sudo apt-get install -y libpcap-dev
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Get Go dependencies
      run: go mod download
      
    - name: Build for Linux AMD64
      run: |
        echo "Building for Linux AMD64..."
        echo "Go version: $(go version)"
        echo "CGO enabled: $CGO_ENABLED"
        CGO_ENABLED=1 go build -ldflags="-s -w" -o 0e7_linux_amd64 .
        if [ $? -ne 0 ]; then
          echo "Build failed"
          exit 1
        fi
        echo "Build completed successfully"
        ls -la 0e7_linux_amd64
        
    - name: Verify Linux binary
      run: |
        file 0e7_linux_amd64
        ldd 0e7_linux_amd64 || echo "Binary verification completed"
        
    - name: Create archive
      run: |
        tar -czf 0e7_linux_amd64.tar.gz 0e7_linux_amd64
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: linux-amd64
        path: 0e7_linux_amd64.tar.gz

  build-darwin:
    runs-on: macos-latest
    
    strategy:
      matrix:
        include:
          - goarch: amd64
          - goarch: arm64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Homebrew packages
      uses: actions/cache@v3
      with:
        path: |
          /usr/local/Cellar
          /usr/local/var/homebrew/locks
          /usr/local/Homebrew/Library/Taps
        key: brew-libpcap-${{ runner.os }}-${{ hashFiles('**/build.yml') }}
        restore-keys: |
          brew-libpcap-${{ runner.os }}-
          brew-${{ runner.os }}-
          
    - name: Install libpcap
      run: |
        brew install libpcap
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Get Go dependencies
      run: go mod download
      
    - name: Build for Darwin
      run: |
        echo "Building for Darwin ${{ matrix.goarch }}..."
        echo "Go version: $(go version)"
        echo "CGO enabled: $CGO_ENABLED"
        GOARCH=${{ matrix.goarch }} CGO_ENABLED=1 go build -ldflags="-s -w" -o 0e7_darwin_${{ matrix.goarch }} .
        if [ $? -ne 0 ]; then
          echo "Build failed"
          exit 1
        fi
        echo "Build completed successfully"
        ls -la 0e7_darwin_${{ matrix.goarch }}
        
    - name: Verify Darwin binary
      run: |
        file 0e7_darwin_${{ matrix.goarch }}
        otool -L 0e7_darwin_${{ matrix.goarch }} || echo "Binary verification completed"
        
    - name: Create archive
      run: |
        tar -czf 0e7_darwin_${{ matrix.goarch }}.tar.gz 0e7_darwin_${{ matrix.goarch }}
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: darwin-${{ matrix.goarch }}
        path: 0e7_darwin_${{ matrix.goarch }}.tar.gz

  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache 7-Zip
      id: cache-7zip
      uses: actions/cache@v3
      with:
        path: C:\ProgramData\chocolatey\bin\7z.exe
        key: 7zip-v1
        restore-keys: |
          7zip-
          
    - name: Install 7-Zip (if not cached)
      if: steps.cache-7zip.outputs.cache-hit != 'true'
      run: |
        Write-Host "Installing 7-Zip..."
        choco install 7zip -y
        Write-Host "7-Zip installed successfully"
        
    - name: Cache WinPcap installer
      id: cache-winpcap
      uses: actions/cache@v3
      with:
        path: winpcap-nmap-4.13.exe
        key: winpcap-nmap-4.13-v1
        restore-keys: |
          winpcap-nmap-4.13-
          
    - name: Download WinPcap installer (if not cached)
      if: steps.cache-winpcap.outputs.cache-hit != 'true'
      run: |
        Write-Host "Downloading Nmap 7.12 setup to extract WinPcap..."
        try {
          # Download Nmap 7.12 setup
          Invoke-WebRequest -Uri "https://nmap.org/dist/nmap-7.12-setup.exe" -OutFile "nmap-7.12-setup.exe" -TimeoutSec 300 -UseBasicParsing
          Write-Host "Nmap setup downloaded successfully"
          
          # Extract WinPcap from Nmap setup using 7-Zip
          Write-Host "Extracting WinPcap from Nmap setup..."
          & "C:\ProgramData\chocolatey\bin\7z.exe" e nmap-7.12-setup.exe winpcap-nmap-4.13.exe
          Write-Host "WinPcap extracted successfully using 7-Zip"
        } catch {
          Write-Host "WinPcap download/extraction failed: $($_.Exception.Message)"
          exit 1
        } finally {
          # Clean up
          if (Test-Path "nmap-7.12-setup.exe") { Remove-Item "nmap-7.12-setup.exe" -Force }
        }
        
    - name: Install WinPcap
      run: |
        # Check if WinPcap is already installed
        $winpcapInstalled = Get-WmiObject -Class Win32_Product | Where-Object {$_.Name -like "*WinPcap*"}
        if ($winpcapInstalled) {
          Write-Host "WinPcap is already installed. Version: $($winpcapInstalled.Version)"
        } else {
          if (Test-Path "winpcap-nmap-4.13.exe") {
            Write-Host "Installing WinPcap from cached installer..."
            $process = Start-Process -FilePath "winpcap-nmap-4.13.exe" -ArgumentList "/S", "/v/qn" -Wait -PassThru -NoNewWindow
            if ($process.ExitCode -eq 0) {
              Write-Host "WinPcap installed successfully from cached installer"
            } else {
              Write-Host "WinPcap installation failed with exit code: $($process.ExitCode)"
              # Try alternative installation method
              Start-Process -FilePath "winpcap-nmap-4.13.exe" -ArgumentList "/SILENT", "/NORESTART" -Wait
              Write-Host "WinPcap installation completed with alternative method"
            }
          } else {
            Write-Host "WinPcap installer not found, installation skipped"
            exit 1
          }
        }
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '24'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd frontend
        npm ci
        
    - name: Build frontend
      run: |
        cd frontend
        npm run build
        
    - name: Get Go dependencies
      run: go mod download
      
    - name: Build for Windows AMD64
      run: |
        $env:CGO_ENABLED = "1"
        Write-Host "Building for Windows AMD64..."
        Write-Host "Go version: $(go version)"
        Write-Host "CGO enabled: $env:CGO_ENABLED"
        go build -ldflags="-s -w" -o 0e7_windows_amd64.exe .
        if ($LASTEXITCODE -ne 0) {
          Write-Host "Build failed with exit code: $LASTEXITCODE"
          exit 1
        }
        Write-Host "Build completed successfully"
        Get-ChildItem 0e7_windows_amd64.exe | Format-Table Name, Length, LastWriteTime
        
    - name: Verify Windows binary
      run: |
        Write-Host "Verifying Windows binary..."
        Get-ItemProperty 0e7_windows_amd64.exe | Select-Object Name, Length, VersionInfo
        Write-Host "Binary verification completed"
        
    - name: Create archive
      run: |
        Compress-Archive -Path "0e7_windows_amd64.exe" -DestinationPath "0e7_windows_amd64.zip"
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: windows-amd64
        path: 0e7_windows_amd64.zip

  release:
    needs: [build-linux, build-darwin, build-windows]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.version
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Prepare release files
      run: |
        mkdir -p release
        find . -name "*.tar.gz" -o -name "*.zip" | while read file; do
          cp "$file" release/
        done
        
        # Create combined archive
        cd release
        tar -czf 0e7_all_platforms.tar.gz *.tar.gz *.zip
        cd ..
        
        ls -la release/
        
    - name: Get version
      id: get_version
      run: |
        if [[ $GITHUB_REF == refs/tags/* ]]; then
          VERSION=${GITHUB_REF#refs/tags/}
        else
          VERSION="dev-$(date +%Y%m%d-%H%M%S)"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "Building version: $VERSION"
        
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.version }}
        name: Release ${{ steps.get_version.outputs.version }}
        draft: false
        prerelease: false
        files: |
          release/*
        body: |
          ## 0E7 Security Tool Release ${{ steps.get_version.outputs.version }}
          
          ### Downloads
          - **Linux AMD64**: `0e7_linux_amd64.tar.gz`
          - **macOS AMD64**: `0e7_darwin_amd64.tar.gz`
          - **macOS ARM64**: `0e7_darwin_arm64.tar.gz`
          - **Windows AMD64**: `0e7_windows_amd64.zip`
          - **All Platforms**: `0e7_all_platforms.tar.gz`
          
          ### Installation
          1. Download the appropriate file for your platform
          2. Extract the archive
          3. Make the binary executable (Linux/macOS): `chmod +x 0e7_*`
          4. Run: `./0e7_*` (Linux/macOS) or `0e7_*.exe` (Windows)
          
          ### Features
          - Network traffic analysis
          - PCAP file processing
          - Client-server architecture
          - Web-based management interface
          
          ### Dependencies
          - **Linux**: Requires libpcap-dev
          - **macOS**: Requires libpcap (via Homebrew)
          - **Windows**: Requires WinPcap (extracted from Nmap 7.12 setup)
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}